# What are indexes?
A mechanism that SQL engines use to speed up queries.

# How do you implement indexes?
Indexes are automatically created when you define a PRIMARY KEY constraint or a UNIQUE constraint on a column. You can also use the CREATE INDEX command to create an index. `CREATE INDEX index_name ON table_name (field_name);` The index is the mechanism by which these constraints enforce uniqueness. 

# What are the trade-offs involved in using indexes?
If you build an index of a field, reads become faster, but every time a row is updated or inserted, the index must be updated as well. You would be updating not only the table but also the index.
Some useful rules of thumb:
- Indexes are best used in cases where sequential reading is inadequate. For example: columns that aid in mapping relationships (such as Foreign Key columns), or columns that are frequently used as part of an ORDER BY clause, are good candidates for indexing.
- They are best used in tables and/ or columns where the data will be read much more frequently than it is created or updated.

# What is the default type of index used in PostgreSQL?
b-tree

# What is the only type of index available for unique indexes?
b-tree

# Do FOREIGN KEY constrains automatically create an index on a column?
No

# What is the syntax for adding an index to a table?
CREATE INDEX index_name ON table_name (field_name);
If index_name is omitted, PostgreSQL automatically generates a unique name for the index.

# Can you create a multicolumn index?
Yes. CREATE INDEX index_name ON table_name (field_name_1, field_name_2);
Only certain index types support multi-column indexes, and there is a limit to the number of columns that can be combined in an index.

# Can you create a partial index?
Yes, partial indexes are built from a subset of the data in a table. The subset of data is defined by a conditional expression, and the index contains entries only for the rows from the table where the value in the indexed column satisfies the condition. Partial indexes can be useful in certain situations, but most of the time you will be using single-column or perhaps multi-column indexes.

# What PostgreSQL console command can you use to display all of the indexes in a database?
\di

# How do you delete an index?
DROP INDEX index_name;

# How do you view the query plan for a query?
EXPLAIN query; (e.g., EXPLAIN SELECT * from books;)

# When you use EXPLAIN, is the query actually run?
No. The values that EXPLAIN outputs are estimates, based on the planner's knowledge of the schema and assumptions based on PostgreSQL system statistics. In order to assess a query using actual data, you can add the ANALYZE option to an EXPLAIN command. (e.g., EXPLAIN ANALYZE SELECT * from books;)

# What does EXISTS do?
EXISTS effectively checks whether any rows at all are returned by the nested query. If at least one row is returned then the result of EXISTS is 'true', otherwise it is 'false'. (e.g., SELECT 1 WHERE EXISTS (SELECT id FROM books WHERE isbn = 1234); would return 1 if the isbn exists, and no rows otherwise)

# What does ANY/SOME do?
ANY and SOME are synonyms, and can be used interchangeably. These expressions are used along with an operator (e.g. =, <, >, etc). The result of ANY / SOME is 'true' if any true result is obtained when the expression to the left of the operator is evaluated using that operator against the results of the nested query.

# How can you use ANY/SOME in a way that is equivalent to using IN?
Use the = operator with ANY/SOME

# 
