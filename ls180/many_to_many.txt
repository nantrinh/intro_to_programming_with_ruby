CREATE TABLE customers (
  id serial PRIMARY KEY,
  name text NOT NULL,
  payment_token char(8) NOT NULL CHECK (payment_token ~ '^[A-Z]{8}$')
);

CREATE TABLE services (
  id serial PRIMARY KEY,
  description text NOT NULL,
  price numeric(10, 2) NOT NULL CHECK (price >= 0.00)
);

INSERT INTO customers (name, payment_token) VALUES
('Pat Johnson'  , 'XHGOAHEQ'),
('Nancy Monreal', 'JKWQPJKL'),
('Lynn Blake'   , 'KLZXWEEE'),
('Chen Ke-Hua'  , 'KWETYCVX'),
('Scott Lakso'  , 'UUEAPQPS'),
('Jim Pornot'   , 'XKJEYAZA');

INSERT INTO services (description, price) VALUES
('Unix Hosting'        , 5.95),
('DNS'                 , 4.95),
('Whois Registration'  , 1.95),
('High Bandwidth'      , 15.00),
('Business Support'    , 250.0),
('Dedicated Hosting'   , 50.00),
('Bulk Email'          , 250.0),
('One-to-one Training' , 999.0);

CREATE TABLE customers_services(
  id serial PRIMARY KEY,
  customer_id integer NOT NULL REFERENCES customers(id) ON DELETE CASCADE,
  service_id integer NOT NULL REFERENCES services(id),
  UNIQUE(customer_id, service_id)
);

INSERT INTO customers_services (customer_id, service_id) VALUES
(1, 1), (1, 2), (1, 3), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5),
(4, 1), (4, 4), (5, 1), (5, 2), (5, 6), (6, 1), (6, 6), (6, 7);

SELECT DISTINCT c.*
FROM   customers AS c
       INNER JOIN customers_services AS cs
       ON cs.customer_id = c.id;

SELECT DISTINCT c.*
FROM   customers AS c
       LEFT OUTER JOIN customers_services AS cs
       ON cs.customer_id = c.id
WHERE  cs.service_id IS NULL; 

SELECT DISTINCT c.*, s.*
FROM   customers AS c
       FULL OUTER JOIN customers_services AS cs
       ON cs.customer_id = c.id
       FULL OUTER JOIN services AS s
       ON cs.service_id = s.id
WHERE  cs.service_id IS NULL OR cs.customer_id IS NULL; 

SELECT s.description
FROM   customers_services AS cs
       RIGHT OUTER JOIN services AS s 
       ON s.id = cs.service_id 
WHERE  cs.customer_id IS NULL; 

SELECT c.name, string_agg(s.description, ', ') AS services
FROM   customers AS c
       LEFT OUTER JOIN customers_services AS cs
       ON cs.customer_id = c.id
       LEFT OUTER JOIN services AS s
       ON cs.service_id = s.id
GROUP  BY c.name;

SELECT s.description, COUNT(cs.customer_id) AS count
FROM   services AS s
       INNER JOIN customers_services AS cs
       ON cs.service_id = s.id
GROUP  BY s.description
HAVING COUNT(cs.customer_id) >= 3;

SELECT SUM(s.price) AS gross
FROM   services as s
       INNER JOIN customers_services AS cs
       ON cs.service_id = s.id;

INSERT INTO customers (name, payment_token) VALUES ('John Doe',  'EYODHLCN');
INSERT INTO customers_services (customer_id, service_id) VALUES
(7, 1), (7, 2), (7, 3);

SELECT SUM(s.price)
FROM   services as s
       INNER JOIN customers_services AS cs
       ON cs.service_id = s.id
WHERE  s.price > 100;

SELECT SUM(s.price) * COUNT(DISTINCT c.id)

SELECT SUM(price)
FROM   services
       cross join customers
WHERE  price > 100

DELETE FROM customers_services WHERE service_id = 7 OR customer_id = 4;
DELETE FROM customers WHERE id = 4;
DELETE FROM services WHERE id = 7;
