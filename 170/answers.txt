1. Always sanitize user input. Eliminate problematic input, such as <script> tags, or disallow HTML and JavaScript input altogether in favor of a safer format, like Markdown.

2. Escape all user input data when displaying it. If you do need to allow users to input HTML and JavaScript, then when you print it out, make sure to escape it so that the browser does not interpret it as code.

To escape a character means to replace an HTML character with a combination of ASCII characters, which tells the client to display that character as is, and to not process it; this helps prevent malicious code from running on a page. These combinations of ASCII characters are called HTML entities.

e.g., <p>Hello World!<\p> becomes &lt;p&gt;Hello World!&lt;\p&gt;, which would be displayed as plain text.
###
A web server is typically a server that responds to requests for static assets: files, images, css, javascript, etc. These requests don't require any data processing.

An application server is typically where application or business logic resides, and is where more complicated requests are handled. This is where your server-side code lives when deployed.

The application server will often consult a persistent data store, like a relational database, to retrieve or create data. Data stores can also be simple files, key/value stores, document stores and many other variations, as long as it can save data in some format for later retrieval and processing.
###
HTTP is what's known as an application layer protocol, which means it is a convention or agreement between two parties. HTTP is an agreement on how to format a string request.

TCP/IP is a large set of protocols that governs how systems should communicate with each other over the internet. Collectively, this is known as the Open Systems Interconnection model (or OSI model).

HTTP is along the lines of a convention and only operates at the application layer, while the OSI model specifies communication rules among systems on the internet across all layers. HTTP uses TCP/IP under the hood as the transport and network layers; it's actually TCP/IP that's doing all the heavy lifting and ensuring that the request/response cycle gets completed between your browser and the server.
###
Method, path, host header
Optional: parameters, all other headers, message body
###

Status code.
Optional: headers and body
###
GET requests should only retrieve content from the server. They can generally be thought of as "read only" operations, however, there are some subtle exceptions to this rule. For example, consider a webpage that tracks how many times it is viewed. GET is still appropriate since the main content of the page doesn't change.

POST requests involve changing values that are stored on the server. Most HTML forms that submit their values to the server will use POST. Search forms are a noticeable exception to this rule: they often use GET since they are not changing any data on the server, only viewing it.
###
Application layer protocol
###
Transport and Network
###
By sending data as parameters through the URL.
By using sessions.
By using cookies.
AJAX.
###
unencrypted 80; encrypted 443
###
%20
+
###
data store
application server
web server
###
application server
###

