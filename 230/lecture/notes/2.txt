# Can you tell whether code is asynchronous just by looking at it?
---
No. 
If it calls any functions, then you must be familiar with the behavior of each of those functions to determine whether any are asynchronous.
You must also know whether the code you're looking at was invoked asynchronously.

# Are setTimeout and setInterval part of the JavaScript specification?
---
No, but most environments make them available.

# What does setTimeout do?
---
executes a function after n milliseconds have passed
Example:
```
setTimeout(function() {
  console.log('!');
}, 3000);
```

# What does setInterval do?
---
Executes a function every n milliseconds until canceled.
setInterval returns an identifier that can be passed as an argument to clearInterval() to cancel the timer.
Example:
```
function save() {
  // Send the form values to the server for safe keeping
}

// Call save() every 10 seconds
var id = setInterval(save, 10000);

// Later, perhaps after the user submits the form
clearInterval(id);
```

# What is an event?
---
An object that represents some occurrence; it contains information about what happened and where it happened

# What are the two main tasks of user interfaces in the browser?
---
1. Set up the user interface and display it.
2. Handle events resulting from user or browser actions.

# What is an event listener?
---
The code that the browser runs in response to an event.
Functions that the JavaScript runtime calls when a particular event occurs.

# Give an example of the page-loading process. Specify when the DOMContentLoaded event and load event will fire.
---
1. HTML code received from server.
2. HTML parsed and JavaScript evaluated.
3. DOM constructed from parsed HTML.
4. `DOMContentLoaded` event fires on `document`.
5. Page displayed on screen.
6. Embedded assets are loaded.
7. `load` event fires on `window`.

# When would we typically use the DOMContentLoaded event?
---
When we have JavaScript code that must access the DOM.

# Why is the `load` event not useful in most cases?
---
It fires only after everything on the page loads, including images and videos. It may not occur for a long time after the page first appears.

# What are the four steps needed to set up an event handler?
---
1. Identify the event you need to handle.
User actions, the page lifecycle, and more can fire events.

2. Identify the element that will receive the event.
Depending on the event, the object could be a button, an input field, or any other element on the page.

3. Define a function to call when this event occurs.
The function will receive a single argument, an Event object. We'll learn more about Events later.

4. Register the function as an event listener.
This step brings the first three together into a working system.

# Suppose we have a function `displayAlert` that we want to invoke when a user clicks on a button. Show how to do this (a) by registering `displayAlert` as the `click` listener, and (b) using the GlobalEventHandlers mixin to assign the listener to the `onclick` property of the `button` element.
---
```
document.addEventListener('DOMContentLoaded', function() {
  var button = document.getElementById('alert');
  button.addEventListener('click', displayAlert);
});
```
```
document.addEventListener('DOMContentLoaded', function() {
  var button = document.getElementById('alert');
  button.onclick = displayAlert;
});
```
Note that using GlobalEventHandlers mixins isn't exactly equivalent to using EventTarget.addEventListener. You can't use the `onclick` property to add multiple event listeners, for instance.

# What do the `type`, `currentTarget`, and `target` properties of Event objects represent?
---
`type`: the name of the event (e.g., 'click')
`currentTarget`: the current object that the event object is on. It always refers to the element that has the event listener attached to it
`target`: the initial object to receive notification of the event, e.g., the element clicked by the user

# True or False: most events have properties specific to their type.
---
True

# What do the `button`, `clientX`, and `clientY` properties of mouse events represent?
`button`: this is a read-only property that indicates which button was pressed
`clientX`: the horizontal position of the mouse when the event occurred
`clientY`: the vertical position of the mouse when the event occurred

Note that `clientX` and `clientY` return values relative to the visible area of the page: the number of pixels from the upper-left corner of the browser's viewport.

# What do the `key`, `shiftKey`, `altKey`, `ctrlKey`, and `metaKey` properties of keyboard events represent?
---
`key`: The string value of the pressed key.
`shiftKey`: Boolean value that indicates whether the user pressed the shift key 
`altKey`: Boolean value that indicates whether the user pressed the alt (or option)
`ctrlKey`: Boolean value that indicates whether the user pressed the control key
`metaKey`: Boolean value that indicates whether the user pressed the meta (or command) key

Note that keypress doesn't fire for all keys. The modifier keys (Shift, Control, etc.), for instance, don't generate a keypress event. If you must detect these keys by themselves, you have to listen for keyup or keydown events, not keypress.

# What are three downsides to the approach of adding handlers to elements that may be the source of events? (This approach results in event listeners attached to each element of interest on the page.)
---
- You can't add an event listener to an element until the DOM is ready, which means that you must wait until the DOMContentLoaded event fires.
- You must add event handlers manually when you add new elements to the page after DOMContentLoaded fires.
- Adding handlers to many elements can be slow, and can lead to complicated, difficult to maintain code. Imagine a page with a large spreadsheet-like grid with hundreds or thousands of cells; you must provide listeners for both keyboard and mouse events in every cell.

# What is the difference between `currentTarget` and `target`?
---
`currentTarget` always refers to the element to which an event listener is added.
`target` refers to the element on which the event occurred, such as the element clicked on.

# What is the value of `this` within the handler?
---
`currentTarget`: the element the listener was added to

# What does "capturing and bubbling" refer to?
---
Phases that an event goes through after it initially fires. The event first gets dispatched to the global window object, then to the document object, all the way down to the target element, which is the element on which the event was originally fired. At this point, this dispatch process reverses and from the target element the event works its way through containing elements until it reaches the window object. 

# Is the listener set to fire during the capturing or bubbling phase, by default?
---
Bubbling. To set it to listen on the "capturing phase" you can use the third optional, argument, for the addEventListener method, useCapture, and set it to true.
`elem1.addEventListener('click', callbackFunction, true);`

# What does the "target phase" refer to?
---
When event listeners fire on the target element.

# Does adding an event listener of the same type (e.g. `click`) to the same element overwrite the first one that was added?
---
No

# True or False: When multiple events happen, they form a queue, and the oldest one gets processed first.
---
True
