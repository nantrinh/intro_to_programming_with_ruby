# Explain the `select` element.
select creates a drop-down list of options from which the user can select zero or more options. It has two possible child elements, the option and optgroup elements (LS does not discuss optgroup). select uses the name attribute like other form elements, but it uses the option elements within it to describe the values shown to the user and sent to the server (which may be different).
An option defines one of the choices a user can make in a select tag. A select element is useless without its option elements. Each option represents a possible value for the select, and they use the value attribute as the value sent as the value of the select element's name. If an option does not have a value attribute, the browser uses the text contained by the option element instead.

select elements often have a placeholder option that says something like Choose one and has a value of an empty string, as well as a disabled and selected attribute. This option works something like the placeholder attribute on text boxes: the user can see some helpful text, but she cannot select that text.

By default, select lets the user choose precisely one option or leave the option unselected if it contains a disabled selected option as shown above. If you add the multiple attribute, the user can select more than one option. You can supply the `size` attribute if you use `multiple`, to specify how many options to display at once in the selection box.
```
<form action="#" method="post">
  <fieldset>
    <label>
      Choose Your Favorite Movies
      <select name="favorites" multiple size="4">
        <option value="" disabled selected>Select One or More</option>
        <option>2001: A Space Odyssey</option>
        <option>Arrival</option>
        <option>Close Encounters of the Third Kind</option>
        <option>District 9</option>
        <option>Guardians of the Galaxy</option>
        <option>Interstellar</option>
        <option>Serenity</option>
        <option>Silent Running</option>
      </select>
    </label>
  </fieldset>
</form>
```

# Explain the `textarea` element.
textarea lets the user input multiple lines of text. Unlike text-type inputs, which ignore carriage returns, newlines, and other whitespace characters, textarea elements retain them and use them to format the text into lines and paragraphs. Unlike other controls, though, the value of the textarea doesn't use the value attribute to provide a value for the element. Instead, you need to contain the text between the opening and closing tags.

Since textarea preserves whitespace, its common practice to code the open and close tags on the same line unless the initial text content contains newlines.

textarea uses the rows and cols attributes to control the height and width of the text box; rows is the height in lines, while cols is the width in characters. As with the size attribute on some input tags, neither measurement is precise - the browser may choose to display more or fewer lines or columns than requested. The CSS height and width properties will also override these attributes. Furthermore, the rows value is not a maximum for the number of lines of input allowed; instead, it's the number of visible lines. The text box enables vertical scrolling when the content exceeds the rows count.

Most browsers today let the user resize the textarea box by dragging and dropping a small triangle that appears in the lower-right corner of the text box. You can disable this feature with the CSS `resize` property.
```
<form action="#" method="post">
  <fieldset>
    <label>
      Comment
      <textarea name="tweet" rows="5" cols="40">I got 20% off my first purchase at joesburgers.com! You can too!</textarea>
    </label>
  </fieldset>
</form>
```
# What are several values you can set for the `type` attribute on  `input` tags?
- checkbox, radio
- text, email, tel, password
- submit, reset
- hidden

# Give an example of how to construct a `select` list.

# Give an example of how to use labels in a form with both `container` and `for` formats.

# How can you use description lists to help format forms?

# What are forms used for?
To gather information from users. 
A form displays information to the user, solicits updates, performs some optional rudimentary validation, and then sends the form data to the server.
A form does NOT update information on the server. Back-end software does that.

# What are the most important attributes of a `form` tag?
`action`: the URL to which the browser sends requests. Individual action items (`button` and `input type="submit"` elements) in a form can override the form's `action` value by using the `formaction` attribute.
`method`: tells the browser whether to use the GET or POST method when sending the data to the server. Use `method="get"` when requesting information from the server and `method="post"` when updating data on the server. HTTP supports other methods but HTML limits you to GET or POST. You can use JavaScript or a backend application to use the other methods.

# What tags does a form need to be useful?
At least one of these tags: `input`, `textarea`, or `select`.

# What is the `fieldset` tag?
An optional tag within `form` tags that groups together form content as a set of related data. Most browsers will draw a border around the content. While it's common to remove that border with CSS, fieldset still provides useful semantic data to the browser, and developers can reference it in their CSS for layout and styling purposes. Forms can have multiple `fieldset` tags.
```
<form action="/login" method="post">
  <fieldset>
    <input type="text" name="username" />
    <input type="password" name="password" />
  </fieldset>
  <fieldset>
    <input type="submit" name="Save" />
    <input type="submit" name="Forgot Password" formaction="/forgot" />
  </fieldset>
</form>
```

# What is the `input` tag?
The input tag is a self-closing tag that describes a control or widget: a mechanism that lets the user supply information or a request to the application on the server. Each input requires a type attribute, which has a large number of valid values, most of which are new in HTML5; each value indicates the type of widget required. For instance, type="text" provides space for the user to enter some text, while type="submit" provides a button that submits the form to the server.
Most input controls require a name attribute to specify the name of each item. The browser uses these names to identify each data item in the form, while the back-end application looks for that name to find the appropriate value.
```
<input type="text" name="city" />
<input type="password" name="password" />
<input type="submit" value="Save" />
```

# What is the `label` tag?
The label tag provides a way to associate some identifying text with an input field. Here we associate the label `Phone` with the field named `phone_number`:
```
<label for="phone">Phone</label>
<input type="text" id="phone" name="phone_number" />
```
The browser uses the for attribute in the label tag and the id attribute in the input tag to associate the two items. One advantage of this association is that the user can click on the label to make the cursor jump to the desired field.
You can also use `label` tags as containers. The "container" syntax eliminates the need for the for and id attributes, so it's easier to use. However, styling can be more difficult with the container syntax, and there are times when you must use a `for` attribute, so learn both variants.
```
<label>
  Phone
  <input type="text" name="phone" />
</label>
```

# What is in this form?
```
<form action="#" method="post">
  <fieldset>
    <h1>Log In</h1>
    <label for="username">Username</label>
    <input type="text" name="username" id="username" />

    <label for="password">Password</label>
    <input type="password" name="password" id="password" />

    <input type="submit" value="Log In" />
    <input type="submit" value="Delete account"
           formaction="/account/delete" />
    <input type="submit" value="Forgot password"
           formaction="/account/password" />
    <input type="reset" value="Reset" />
  </fieldset>
</form>
```
Two input fields (username and password), each with a label.
4 buttons: log in, delete account, forgot password, and reset.
They will all show up on the same line, if there is room. To section it out better, use `fieldset`.

# What does `type="text"` do, when placed inside an `input` tag? 
Creates a simple entry text. You can set the `maxlength` attribute in CSS to specify the input's maximum length.
```
<form action="#" method="post">
  <fieldset>
    <label>
      First Name
      <input type="text" name="first_name" value="Tom Thumb" />
    </label>
  </fieldset>
</form>
```

# What does `type="password"` do, when placed inside an `input` tag? 
Creates a single-line text field with an obscured value. You can set the `maxlength` attribute in CSS to specify the input's maximum length.
```
<form action="#" method="post">
  <fieldset>
    <label for="password">Password</label>
    <input type="password" name="password" id="password"
           value="" size="35" />
  </fieldset>
</form>
```

# What does `type="email"` do, when placed inside an `input` tag? 
Allows entry of an email address in the form username@domain.
```
<form action="#" method="post">
  <fieldset>
    <label>
      Email
      <input type="email" name="email" placeholder="username@domain" />
    </label>
  </fieldset>
</form>
```

# What does `type="tel"` do, when placed inside an `input` tag? 
Allows entry of a telephone number.
```
<form action="#" method="post">
  <fieldset>
    <label>
      Phone
      <input type="tel" name="phone" placeholder="(###) ###-####" />
    </label>
  </fieldset>
</form>
```

# What does `type="checkbox"` do, when placed inside an `input` tag? 
Lets the user choose one or more items from a series of yes/no-type options. Use the value attribute to give the value the form sends to the server when the user selects that checkbox. Use the checked attribute to pre-select checkboxes. Use the name attribute to name a set of related checkboxes. The user can select zero or more items in each set of checkboxes.

The browser will send a name=value pair for each selected box, and no value for the unselected boxes. In the example below, the browser will send choice=google and choice=recent to the server.
```
<form action="#" method="post">
  <fieldset>
    <label>
      <input type="checkbox" name="choice" value="search" />
      Sort search results
    </label>

    <label>
      <input type="checkbox" name="choice" value="google" checked />
      Search on Google
    </label>

    <label>
      <input type="checkbox" name="choice" value="recent" checked />
      Recent results (within last year)
    </label>
  </fieldset>
</form>
```
You can also use the `name` attribute without a value attribute. In the example below, the browser will send `google=on` and `recent=on` to the server. In most cases it is easiest to use separate values for  `name`.
```
<form action="#" method="post">
  <fieldset>
    <label>
      <input type="checkbox" name="search" />
      Sort search results
    </label>

    <label>
      <input type="checkbox" name="google" checked />
      Search on Google
    </label>

    <label>
      <input type="checkbox" name="recent" checked />
      Recent results (within last year)
    </label>
  </fieldset>
</form>
```


# What does `type="radio"` do, when placed inside an `input` tag? 
Lets the user choose zero or one item from a list of options. If you pre-select an item with the `checked` attribute or the `:checked` pseudo-class in CSS, then the user must either go with the selected choice or select another. Use radio buttons up to 5-8 items, after which you should use the `select` list control.

# What does `type="submit"` do, when placed inside an `input` tag? 
Creates a button that the user can click to submit the contents of a form to the server. The action attribute on the form tag typically provides the URL of the server, but you can override that by using the formaction attribute with this tag.
```
<form action="#" method="post">
  <fieldset>
    <input type="submit" value="Save" />
  </fieldset>
</form>
```

# What does `type="reset"` do, when placed inside an `input` tag? 
Creates a button that the user can click to reset the contents of a form to its default values. Clicking a reset button does not send a request to the server.
```
<form action="#" method="post">
  <fieldset>
    <input type="reset" value="Clear Form" />
  </fieldset>
</form>
```
 
# What is the meaning of the `value` attribute inside an `input` tag?
The meaning varies with the `type`. For text-based types such as text, email, and number, the value assigns a default value for the control. If you don't supply a default value, the browser uses an empty string.

`checkbox` and `radio` types use the value attribute to set the value that the form submits for the indicated checkbox or radio group element. `radio` input types require the `value` attribute. It is optional for `checkbox`. If the `value` attribute is omitted from a `checkbox` element, the browser sends a value of `name=on` when the user selects the box with the specified `name`.

Button types, such as `submit`, `reset`, and the `button` type use the value attribute for the label that appears on the button. Note that you should consider using the `button` element instead of the `button` type.

# What is the meaning of the `size` and `maxlength` attributes inside an `input` tag?
These attributes applies to most text-based input types. The size attribute lets you control the size of an input element in characters. You can also specify the width with the CSS width property, but it does not support character measurements. `maxlength` limits the maximum length of input values. This value can be more or less than the `size` value.
size is an approximation for the width of the input box. The HTML5 standard requires that "the user agent should ensure that at least that many characters are visible"; in practice, you will see both more and fewer characters displayed. The CSS width overrides the size attribute in CSS-enabled browsers.

# What is the meaning of the `placeholder` attribute inside an `input` tag?
The placeholder attribute lets you display some text when a field is empty to help describe the expected input; it applies to most of the text-based input types. Most browsers display placeholder text using a grayed-out format, and they erase the placeholder text as soon as you start typing. Do not use placeholders as a substitute for labels because it breaks screen readers. If you're forced to use placeholders, include the labels too, but hide them using CSS. This hack works well since most screen readers will read the hidden text.

# What is the meaning of the `disabled` attribute inside an `input` tag?
It lets you disable `input` elements. The browser will render the element but won't let the user interact with it. The rendering looks different from enabled attributes, often by using a gray or lighter color. disabled also turns on the :disabled CSS pseudo-class. (Non-disabled elements set the :enabled pseudo-class.)
Most web applications handle the disabled attribute programmatically, either at the time the application generates the HTML or dynamically with JavaScript. 

# What is the meaning of the `required` attribute inside an `input` tag?
The required attribute marks an input as required; the browser won't let you submit the form until the user completes all required fields. required also turns on the :required CSS pseudo-class.


# What is the meaning of the `autocomplete` attribute inside an `input` tag?
Prevents the browser from storing and using data for later reuse by the browser's autocomplete functionality. YOu can set it on or off explicitly on any given field.

# What is the meaning of the `autocapitalize` attribute inside an `input` tag?
Some browsers recognize autocapitalize to turn autocapitalization on and off for the first letter of words or sentences. Browsers that recognize this tag default to sentences. Use autocapitalize="none" when expecting input that you don't want to capitalize. You can also specify autocapitalize="words" or autocapitalize="characters".

# What is the meaning of the `autocorrect` attribute inside an `input` tag?
Some browsers recognize autocorrect to turn autocorrect (spelling correction) on and off. You can disable this feature with autocorrect="off" when accepting input where spelling correction may be a problem, such as with names, addresses, etc.

# What does the `border-radius` property do?
Applies rounded corners to any element with a border.

# What does the `appearance` property do?
Lets you turn off the browser-specific default appearance of a widget.

# What value should you set the `action` attribute to, instead of an empty string, if you want your code to pass W3C validation?
"#"

# What is the difference between the `id` and `name` attributes?
- `id` is used to identify the HTML element through the Document Object Model (via JavaScript or styled CSS). It is expected to be unique within the page.
- The browser uses the `id` attribute to associate the `input` tag with a `label` tag (via the `for` attribute in the `label` tag).
- Screen-readers use `id`.
- `name` identifies what is posted back to the server. `name` does not have to be unique.
