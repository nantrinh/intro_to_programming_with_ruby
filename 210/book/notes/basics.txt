# What are the five primitive data types in JavaScript?
---
String, Number, Undefined, Null, Boolean

# How do you use string interpolation?
---
backticks ${}
for example, `Hello ${5 + 5}` => 'Hello 10'
only works in template literals (i.e., within backticks) 

# Are there Integers, Floats, etc., in JavaScript?
---
No, only Number.

# What is `undefined`?
---
Nothing. console.log returns undefined.
When you declare a variable without giving it a value and then use that variable, it returns undefined.

# What is `null`?
---
Nothing. You must use `null` explicitly if you want it to represent an empty value. It is very similar to `undefined`.

# How do you see what type a particular value has?
---
typeof (e.g., typeof 'foo' => 'string') 

# Why is null of type 'object'?
---
It's a mistake that goes back to the first version. Fixing it now would break too many applications.

# What is 3 / 2?
---
1.5

# How do you test for equality?
---
The threequal operator (===)

# What happens when you run `'1' + 2`?
---
You get '12'. When using +, if either operand is a string and the other is not, JavaScript coerces the non-string operand to a string; thus, the result is always another string.  This is an example of implicit type coercion.

# What is NaN?
---
"Not a Number". 
It's a special value in JavaScript that signals an illegal operation on numbers or, in some cases, a numeric operation with non-numeric values.

It arises in two main situations:
- Undefined mathematical operations, such as dividing a number by 0 or trying to take the square root of a negative number.
- Trying to convert a non-number value, such as 'hello', to a number.

NaN's type is a number.

# What is the difference between implicit and explicit type coercion?
---
Explicit coercion lets you decide what kind of coercion you want, whereas implicit coercion lets the engine decide.

# How do you coerce a string to a number?
---
Use the Number function (e.g., Number('1'))

# What does Number('foo') return?
---
NaN

# How do you coerce a string to an integer, specifically?
---
parseInt function (e.g., parseInt('12')

# What does parseInt('12xyz') return?
---
12

# How do you coerce a string to a floating-point number?
---
parseFloat()

# How do you coerce numbers into strings?
---
String()

# What are JavaScript objects?
---
known as hashes or dictionaries in other languages
e.g., { dog: 'barks', cat: 'meows', pig: 'oinks' }

# What is an expression?
---
Anything that JavaScript can evaluate to a value

# What do statements evaluate to?
---
undefined

# Give an example of a statement.
---
let foo
(declaring a variable `foo`)

# What does "log" mean in JavaScript?
---
To print or display something in the console

# What does the following code return?
```
var foo = ['a', 'b', 'c'];
foo[3];
```
---
undefined

# What value does `'12' < '9'` evaluate to?
true, because When you compare two strings, JavaScript performs a character-by-character comparison going from left to right, so on the first comparison, it determines that '1' < '9', so '12' must be less than '9'.
