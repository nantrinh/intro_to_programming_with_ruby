#! /usr/bin/env ruby

require 'pry'
require 'pg'
require 'io/console'

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: 'expenses')
  end

  def list_expenses
    result = @connection.exec('SELECT * FROM expenses')
    display_expenses(result)
  end
  
  def add_expenses(amount, memo)
      sql = <<~SQL 
        INSERT INTO expenses (amount, memo) 
        VALUES ($1, $2)
      SQL
      @connection.exec_params(sql, [amount, memo])
  end

  def search_expenses(term)
    sql = 'SELECT * FROM expenses WHERE memo ILIKE $1'
    result = @connection.exec_params(sql, ["%#{term}%"])
    display_expenses(result)
  end

  def delete_expense(id)
    sql = 'SELECT * FROM expenses WHERE id = $1'
    result = @connection.exec_params(sql, [id])

    abort "There is no expense with the id '#{id}'." unless result.ntuples >= 1 
    @connection.exec_params('DELETE FROM expenses WHERE id = $1', [id])
    puts "The following expense has been deleted:"
    display_expenses(result)
  end

  def delete_all_expenses
    @connection.exec_params('DELETE FROM expenses')
    puts "All expenses have been deleted."
  end

  private

  def display_expenses(result)
    result.each do |row|
      puts [row['id'].rjust(3), 
            row['created_on'], 
            row['amount'].rjust(12),
            row['memo']].join(' | ')
    end
  end
end

class CLI
  def initialize
    @app = ExpenseData.new
  end

  def run(arguments)
    command = arguments.first
    
    case command
    when 'list'
      @app.list_expenses 
    when 'add'
      abort "You must provide an amount and memo" unless arguments.size == 3
      @app.add_expenses(arguments[1], arguments[2])
    when 'search'
      @app.search_expenses(arguments[1])
    when 'delete'
      @app.delete_expense(arguments[1])
    when 'clear'
      puts "This will remove all expenses. Are you sure? (y/n)"
      response = $stdin.getch
      @app.delete_all_expenses if response == "y"
    else
      display_help
    end
  end

  private

  def display_help
    puts <<~HELP
      An expense recording system
  
      Commands:
  
      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP
  end
end

CLI.new.run(ARGV)

