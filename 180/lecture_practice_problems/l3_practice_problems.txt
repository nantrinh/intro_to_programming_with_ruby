# Working with Multiple Tables
2. SELECT COUNT(*) FROM tickets; 
3. SELECT COUNT(DISTINCT customer_id) FROM tickets; 
4. 
SELECT (COUNT(DISTINCT tickets.customer_id) / COUNT(DISTINCT customers.id)::float) AS percent_purchasers
FROM   customers
LEFT   OUTER JOIN tickets
ON     customers.id = tickets.customer_id;
5.
SELECT events.name AS event_name, COUNT(tickets.id) AS tickets_sold
FROM   events
       INNER JOIN tickets
       ON events.id = tickets.event_id
GROUP  BY event_name 
ORDER  BY tickets_sold DESC;
6.
SELECT c.id as user_id, c.email, COUNT(DISTINCT t.event_id) as count_events
FROM   customers AS c
       INNER JOIN tickets AS t
       ON t.customer_id = c.id 
GROUP  BY user_id, email
HAVING COUNT(DISTINCT t.event_id) = 3;
7.
SELECT e.name AS event_name, e.starts_at, sections.name AS section_name, seats.row, seats.number AS seat_number
FROM   events AS e
       INNER JOIN tickets AS t
       ON t.event_id = e.id

       INNER JOIN customers AS c
       ON t.customer_id = c.id

       INNER JOIN seats
       ON seats.id = t.seat_id 

       INNER JOIN sections
       ON seats.section_id = sections.id
WHERE  c.email = 'gennaro.rath@mcdermott.co';

# Using Foreign Keys
ALTER TABLE orders ADD CONSTRAINT orders_product_id_fkey FOREIGN KEY (product_id) REFERENCES products(id);

INSERT INTO products (name)
VALUES ('small bolt'),
       ('large bolt');

INSERT INTO orders (product_id, quantity)
VALUES (1, 10),
       (1, 25),
       (2, 15);

SELECT orders.quantity, products.name
FROM   orders
       INNER JOIN products
       ON orders.product_id = products.id;

Yes.
INSERT INTO orders (quantity) VALUES (1);

Have to delete the row first.
ALTER TABLE orders ALTER COLUMN product_id SET NOT NULL;

DELETE FROM orders WHERE product_id IS NULL;

CREATE TABLE reviews (
  id serial PRIMARY KEY,
  product_id integer NOT NULL REFERENCES products(id),
  review text NOT NULL
);

INSERT INTO reviews (product_id, review)
VALUES (1, 'a little small'),
       (1, 'very round!'),
       (2, 'could have been smaller');

False

# One to Many Relationships
INSERT INTO calls ("when", duration, contact_id)
VALUES ('2016-01-18 14:47:00', 632, 6);	

SELECT "when", duration, first_name
FROM   calls
       INNER JOIN contacts
       on calls.contact_id = contacts.id
WHERE  contacts.id != 6; 

INSERT INTO contacts (first_name, last_name, number)
VALUES ('Merve', 'Elk', 6343511126),
       ('Sawa', 'Fyodorov', 6125594874);

INSERT INTO calls ("when", duration, contact_id)
VALUES ('2016-01-17 11:52:00', 175, 26),
       ('2016-01-18 21:22:00', 79, 27);

ALTER TABLE contacts ADD CONSTRAINT number_unique UNIQUE (number);

INSERT INTO contacts (first_name, last_name, number)
VALUES ('Hello', 'World', 7204890809);
ERROR:  duplicate key value violates unique constraint "number_unique"
DETAIL:  Key (number)=(7204890809) already exists.

"when" is a SQL keyword

# Many to Many Relationships
SELECT b.id, b.author, string_agg(c.name, ', ') AS categories 
FROM   books AS b
       INNER JOIN books_categories AS bc
       ON b.id = bc.book_id
       
       INNER JOIN categories AS c
       ON c.id = bc.category_id
GROUP  BY b.id, b.author;

INSERT INTO categories (name)
VALUES ('Space Exploration'), 
       ('Cookbook'),
       ('South Asia');

ALTER TABLE books ALTER COLUMN title TYPE varchar(100);

INSERT INTO books (title, author)
VALUES ('Sally Ride: America''s First Woman in Space', 'Lynn Sherr'),
       ('Jane Eyre', 'Charlotte Bronte'),
       ('Vij''s: Elegant and Inspired Indian Cuisine', 'Meeru Dhalwala and Vikram Vij');

INSERT INTO books_categories (book_id, category_id)
VALUES (4, 1), (4, 5), (4, 7), (5, 2), (5, 4), (6, 8), (6, 1), (6, 9);

ALTER TABLE books_categories ADD UNIQUE (book_id, category_id);

SELECT c.name, COUNT(b.id) AS book_count, string_agg(b.title, ', ') AS book_titles
FROM   categories AS c
       INNER JOIN books_categories AS bc
       ON bc.category_id = c.id
       INNER JOIN books AS b
       ON bc.book_id = b.id
GROUP  BY c.name
ORDER  BY c.name ASC;

# Converting a 1:M Relationship to a M:M Relationship
CREATE TABLE directors_films (
  id serial PRIMARY KEY,
  director_id integer NOT NULL REFERENCES directors(id),
  film_id integer NOT NULL REFERENCES films(id)
);

INSERT INTO directors_films (film_id, director_id)
VALUES (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 3), (8, 7), (9, 8), (10, 4);

ALTER TABLE films DROP COLUMN director_id;

SELECT title, name
FROM   films
       INNER JOIN directors_films AS df
       ON df.film_id = films.id
       INNER JOIN directors
       ON df.director_id = directors.id
ORDER  BY title ASC;

INSERT INTO directors (name)
VALUES ('Joel Coen'), ('Ethan Coen'), ('Frank Miller'), ('Robert Rodriguez');

INSERT INTO films (title, year, genre, duration)
VALUES ('Fargo', 1996, 'comedy', 98),
       ('No Country for Old Men', 2007, 'western', 122),
       ('Sin City', 2005, 'crime', 124),
       ('Spy Kids', 2001, 'scifi', 88);

INSERT INTO directors_films (film_id, director_id)
VALUES (11, 9), (12, 9), (12, 10), (13, 11), (13, 12), (14, 12);

SELECT d.name, COUNT(DISTINCT df.film_id) AS films
FROM   directors AS d
       INNER JOIN directors_films AS df
       ON d.id = df.director_id
GROUP  BY d.name
ORDER  BY films DESC, name ASC;
