# The SQL Language
1. SQL is a special-purpose language.
2. data definition language, data manipulation language, data control language
3. 'canoe', 'a long road', 'weren''t', '"No way!"'
4. ||
5. lower; SELECT lower('HeLlO');
6. t, f
7. SELECT trunc(4 * pi() * 26.3 ^ 2);

# PostgreSQL Data Types
1. Both store text data. varchar enforces a character length that you have to define. Text columns do not have a limit to the number of characters they can hold.
2. Integer stores real numbers. Real stores floating-point numbers. Decimal stores values to a defined level of precision.
3. 2147483647
4. timestamp stores date and time. date only stores date.
5. No

# Working with a Single Table
1.
CREATE TABLE people (
    name varchar(20),
    age integer,
    occupation varchar(50)
);
2.
INSERT INTO people
VALUES ('Abby',      34, 'biologist'),
       ('Mu''nisah', 26, NULL),
       ('Mirabelle', 40, 'contractor');
3.
SELECT * FROM people WHERE name = 'Mu''nisah';
SELECT * FROM people WHERE age = 26;
SELECT * FROM people WHERE occupation IS NULL;
SELECT * FROM people LIMIT 1 OFFSET 1;

4.
CREATE TABLE birds (
    name varchar(50),
    length decimal(3, 1),
    wingspan decimal (3, 1),
    family varchar(50),
    extinct boolean
);

5.
INSERT INTO birds
VALUES ('Spotted Towhee', 21.6, 26.7, 'Emberizidae', false),
       ('American Robin', 25.5, 36.0, 'Turdidae', false),
       ('Greater Koa Finch', 19.0, 24.0, 'Fringillidae', true),
       ('Carolina Parakeet', 33.0, 55.8, 'Psittacidae', true),
       ('Common Kestrel', 35.5, 73.5, 'Falconidae', false);

6.
SELECT name, family
FROM birds
WHERE extinct = false
ORDER BY length DESC;

7.
SELECT round(avg(wingspan), 2) AS avg_wingspan, min(wingspan) as min_wingspan, max(wingspan) as max_wingspan
FROM birds;

8.
CREATE TABLE menu_items (
    item varchar(20),
    prep_time integer,
    ingredient_cost decimal(4, 2),
    sales integer,
    menu_price decimal(4, 2)
);

9. 
INSERT INTO menu_items
VALUES ('omelette', 10, 1.5, 182, 7.99),
       ('tacos', 5, 2, 254, 8.99),
       ('oatmeal', 1, 0.5, 79, 5.99);

10. 
SELECT item, (menu_price - ingredient_cost) AS profit
FROM menu_items
ORDER BY profit DESC LIMIT 1;

11.
SELECT item, menu_price, ingredient_cost,
       round(prep_time/60.0 * 13.0, 2) AS labor,
       menu_price - ingredient_cost - round(prep_time/60.0 * 13.0, 2) AS profit
FROM   menu_items
ORDER  BY profit DESC;

# Loading Database Dumps
1. 
Drops the table "public.films" if it exists, then creates the table with fields title, year, and genre. Adds three rows to the table.
The table does not exist in the database, skipping the command. Create table, insert 3 rows.

2. SELECT * FROM films;
3. 
SELECT * FROM films
WHERE length(title) < 12;
4. 
ALTER TABLE films
ADD COLUMN director varchar(255),
ADD COLUMN duration integer;
5.
UPDATE films
SET director = 'John McTiernan',
    duration = 132
WHERE title = 'Die Hard';

UPDATE films
SET director = 'Michael Curtiz',
    duration = 102
WHERE title = 'Casablanca';

UPDATE films
SET director = 'Francis Ford Coppola',
    duration = 113
WHERE title = 'The Conversation';
6.
INSERT INTO films (title, year, genre, director, duration)
VALUES ('1984', 1956, 'scifi', 'Michael Anderson', 90),
       ('Tinker Tailor Soldier Spy', 2011, 'espionage', 'Tomas Alfredson', 127),
       ('The Birdcage', 1996, 'comedy', 'Mike Nichols', 118);
7.
SELECT title, (extract("year" from current_date) - "year") AS age
FROM films
ORDER BY age;
8. 
SELECT title, duration
FROM films
WHERE duration > 120
ORDER BY duration DESC;
9.
SELECT title
FROM films
ORDER BY duration DESC
LIMIT 1;

# More Single Table Queries
1. createdb residents;
2. psql residents < ~/Documents/launch_school/ls180/residents_with_data.sql
3. 
SELECT state, count(id) AS count_rows
FROM   people
GROUP  BY state
ORDER  BY count_rows DESC
LIMIT 10;
4. 
SELECT substr(email, strpos(email, '@') + 1) as domain, COUNT(id) 
FROM   people 
GROUP  BY domain 
ORDER  BY count DESC;
5. DELETE FROM people WHERE id = 3399;
6. DELETE FROM people WHERE state = 'CA';
7. 
UPDATE people 
SET    given_name = UPPER(given_name)
WHERE  email LIKE '%teleworm.us';
8. DELETE FROM people;

# NOT NULL and Default Values
1. NULL
2.
ALTER TABLE employees 
ALTER COLUMN department SET DEFAULT 'unassigned',
ALTER COLUMN department SET NOT NULL;
3.
CREATE TABLE temperatures (
date date NOT NULL,
low integer NOT NULL,
high integer NOT NULL
);
4.
INSERT INTO temperatures
VALUES ('2016-03-01', 34, 43),
       ('2016-03-02', 32, 44),
etc.
5. 
SELECT date, ROUND((high + low) / 2.0, 1) as average
FROM   temperatures
WHERE  date BETWEEN '2016-03-02' AND '2016-03-08';
6. ALTER TABLE temperatures ADD COLUMN rainfall integer DEFAULT 0;
7.
UPDATE temperatures
SET rainfall = (high + low) / 2 - 35
WHERE (high + low)/2 > 35;
8.
ALTER TABLE temperatures ALTER COLUMN rainfall TYPE numeric(6,3);
UPDATE temperatures
SET rainfall = rainfall * 0.0393701;
9. ALTER TABLE temperatures RENAME TO weather;
10. \d weather;
11. 
pg_dump -d sql_book -t weather --inserts > dump.sql

# More Constraints
1. psql sql_book < ~/Documents/launch_school/ls180/films2.sql
2. 
ALTER TABLE films 
ALTER COLUMN title SET NOT NULL,
ALTER COLUMN year SET NOT NULL,
ALTER COLUMN genre SET NOT NULL,
ALTER COLUMN director SET NOT NULL,
ALTER COLUMN duration SET NOT NULL;
3. not null will be displayed in the Nullable column
4. ALTER TABLE films ADD CONSTRAINT unique_title UNIQUE(title);
5. appears as an index
6. ALTER TABLE films DROP CONSTRAINT unique_title;
7. ALTER TABLE films ADD CONSTRAINT title_length CHECK (length(title) >= 1);
8. 
INSERT INTO films (title, year, genre, director, duration) 
VALUES ('', 2019, 'abc', 'abc', 10);
ERROR:  new row for relation "films" violates check constraint "title_length"
DETAIL:  Failing row contains (, 2019, abc, abc, 10).
9. under a label "Check constraints"
Check constraints:
    "title_length" CHECK (length(title::text) >= 1)
10. ALTER TABLE films DROP CONSTRAINT title_length;
11. ALTER TABLE films ADD CONSTRAINT year_range CHECK (year BETWEEN 1900 AND 2100);
12.
Check constraints:
    "year_range" CHECK (year >= 1900 AND year <= 2100)
13. 
ALTER TABLE films 
ADD CONSTRAINT director_name
CHECK (length(director) >= 3 AND position(' ' in director) > 0);
14.
Check constraints:
    "director_name" CHECK (length(director::text) >= 3 AND "position"(director::text, ' '::text) > 0)
15.
UPDATE films SET director = 'Johnny' WHERE title = 'Die Hard';
ERROR:  new row for relation "films" violates check constraint "director_name"
DETAIL:  Failing row contains (Die Hard, 1988, action, Johnny, 132).
16. can set a NOT NULL constraint, can add Check constraint, data type

# Using Keys
1. CREATE SEQUENCE counter;
2. SELECT nextval('counter');
3. DROP SEQUENCE counter;
4. CREATE SEQUENCE counter INCREMENT BY 2 START WITH 2;
5. regions_id_seq
6. ALTER TABLE films ADD COLUMN id serial PRIMARY KEY;

# GROUP BY and Aggregate Functions
1. psql sql_course < ~/Documents/launch_school/ls180/films4.sql
2. 
INSERT INTO films (title, year, genre, director, duration)
VALUES ('Wayne''s World', 1992, 'comedy', 'Penelope Sheeris', 95),
       ('Bourne Identity', 2002, 'espionage', 'Doug Liman', 118);
3. SELECT DISTINCT genre FROM films;
4. SELECT genre FROM films GROUP BY genre;
5. SELECT ROUND(AVG(duration)) FROM films;
6. SELECT genre, ROUND(AVG(duration)) AS avg_duration FROM films GROUP BY genre;
7. 
SELECT year / 10 * 10 as decade, ROUND(AVG(duration)) as average_duration
  FROM films GROUP BY decade ORDER BY decade;
8. SELECT * FROM films WHERE director LIKE 'John %';
9.
SELECT genre, count(id)
FROM   films
GROUP  BY genre
ORDER  BY count DESC;
10.
SELECT ((year / 10) * 10) AS decade, genre, string_agg(title, ', ') AS films
FROM   films
GROUP  BY decade, genre
ORDER  BY decade, genre;
11.
SELECT genre, SUM(duration) AS total_duration
FROM   films
GROUP  BY genre
ORDER  BY total_duration;
