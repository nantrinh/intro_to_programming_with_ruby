# Does JavaScript implement behavior sharing using class-based inheritance?
---
No. It uses the object prototype to share properties.

# What is the factory object creation pattern? What are some disadvantages of using this pattern?
---
This pattern involves defining functions that return objects. This provides us a way to create objefcts based on a pre-defined template.
Example:
```
function createPerson(firstName, lastName) {
  return {
    firstName: firstName,
    lastName: lastName || '',
    fullName: function() {
      return (this.firstName + ' ' + this.lastName).trim();
    },
  };
}
```
Disadvantages:
- Every object created with the factory function has a full copy of all the methods, which can be redundant.
- There isn't a way for us to inspect an object and know whether we created it from a factory function. This makes it difficult to identify whether an object is of a specific "type."

# What is a constructor function?
---
A function that is intended to be called with the `new` operator.
Example:
```
function Person(firstName, lastName) {
  this.firstName = firstName;
  this.lastName = lastName || '';
  this.fullName = function() {
    return (this.firstName + ' ' + this.lastName).trim();
  };
}

var john = new Person('John', 'Doe');
var jane = new Person('Jane');

john.fullName();              // "John Doe"
jane.fullName();              // "Jane"

john.constructor;             // function Person(..)
jane.constructor;             // function Person(..)

john instanceof Person;       // true
jane instanceof Person;       // true
```

# What happens when you call a function without the `new` operator?
---
We end up defining properties on the global object, since `this` will refer to the global object.
Example:
```
function Person(firstName, lastName) {
  this.firstName = firstName;
  this.lastName = lastName || '';
  this.fullName = function() {
    return (this.firstName + ' ' + this.lastName).trim();
  };
}

Person('John', 'Doe');
window.fullName();          // "John Doe"
```

# What 4 things happen when we call a function with the `new` operator?
---
1. A new object is created.
2. `this` in the function is set to point to the new object.
3. The code in the function is executed.
4. `this` is returned if the constructor doesn't explicitly return an object.

# What is output in the following code?
```
function Person(firstName, lastName) {
  if (!lastName) {
    return 'Please provide a last name';
  }

  this.firstName = firstName;
  this.lastName = lastName;
  this.fullName = function() {
    return (this.firstName + ' ' + this.lastName).trim();
  };
}

var noLastName = new Person('John');
console.log(noLastName);
console.log(noLastName instanceof Person);
```
---
- an instance of the Person constructor
- true

If we want to return an error message and have the last line evaluate to `false`, we should return an object instead:
```
function Person(firstName, lastName) {
  if (!lastName) {
    return { invalidInput: 'Please provide a last name' };
  }

  this.firstName = firstName;
  this.lastName = lastName;
  this.fullName = function() {
    return (this.firstName + ' ' + this.lastName).trim();
  };
}

var noLastName = new Person('John');
console.log(noLastName);   // => { invalidInput: 'Please provide a first name' };
console.log(noLastName instanceof Person); // => false
```

# What naming convention separates constructor functions from other functions?
---
Constructor functions should start with and uppercase letter instead of lowercase.

# What will the code below output? Why?
```
function Lizard() {
  this.scamper = function() {
    console.log("I'm scampering!");
  };
}

var lizzy = Lizard();
lizzy.scamper(); // ?
```
---
The code will throw a `TypeError` because `scamper` is an undefined property on `lizzy`. This is the case because `Lizard` was invoked without the new operator and since there is no explicit return value, the return value is `undefined`. As a result, the value assigned to `lizzy` is `undefined` and, consequently calling `lizzy.scamper()` results in an error since it is attempting to call the `scamper()` method on `undefined`.

# What does "dunder" refer to?
---
double underscore __

# What is the dunder proto (`__proto__`) property set to when we use the `Object.create` method to create an object?
---
the object passed in as an argument to the `Object.create` method.
Note that this is deprecated.
Example:
```
var foo = {
  a: 1,
  b: 2,
};

var bar = Object.create(foo);
bar.__proto__ === foo;                  // true
```
We say that we created the object `bar` with object `foo` as its prototype.
Personal note: think of prototype like a parent class.

# What methods can you use to (a) get the prototype object of `myObject` and (b) check if `myObject` is the prototype object of `foo`?
---
(a) `Object.getPrototypeOf(myObject)`
(b) `myObject.isPrototypeOf(foo)`

# What does the following code output?
```
var foo = {
  a: 1,
  b: 2,
};

var bar = Object.create(foo);
var baz = Object.create(bar);
var qux = Object.create(baz);

Object.getPrototypeOf(qux) === baz;
Object.getPrototypeOf(baz) === bar;
Object.getPrototypeOf(bar) === foo;

foo.isPrototypeOf(qux); 
```
---
true for all
For the last line, we can say that "foo is on qux's prototype chain."

# What is at the end of the prototype chain for all objects?
---
The `Object.prototype` object.
```
var foo = {
  a: 1,
  b: 2,
};

Object.getPrototypeOf(foo) === Object.prototype;      // true
```

# What is an object's prototype if it was created as an Object literal?
---
Object.prototype

# Where does JavaScript search for a property or method, when we try to access it on an object?
---
The object itself and all the objects on its prototype chain until the end is reached.
Example:
```
var foo = {
  a: 1,
  b: 2,
};

var bar = Object.create(foo);
var baz = Object.create(bar);

bar.a;                // 1
baz.a;                // 1
baz.c;                // undefined
```

Let us start with `baz.a` on line 10. First, JavaScript searches the `baz` object. After not finding the `a` property on the `baz` object, it then searches the `bar` object. Finally, it searches the `foo` object and finds the property there. For `baz.c`, since the property is not defined anywhere on `baz`'s prototype chain, `undefined` is returned.

# What are 2 benefits of prototypal inheritance?
---
- We do not have to duplicate methods on objects.
- If we need to add/remove/update behavior or data to apply to all related objects, we can just modify the prototype object. 

# Does JavaScript have classes?
---
No. Objects can be created directly from other objects and methods can be shared via the prototype chain.

# Why is the prototypal inheritance pattern also known as "behavior delegation"?
---
Objects on the bottom of the prototype chain can "delegate" requests to the upstream objects to be handled.

From a top-down POV, the objects on the bottom of the prototype chain "inherited" the properties and behaviors of all of the upstream objects on the prototype chain.

# Can objects created from prototypes override shared behaviors?
---
Yes, by defining the same methods locally.
Example:
```
var dog = {
  say: function() {
    console.log(this.name + ' says Woof!');
  },
};

var fido = Object.create(dog);
fido.name = 'Fido';
fido.say = function() {
  console.log(this.name + ' says Woof Woof!');
};

fido.say();             // => Fido says Woof Woof!
var spot = Object.create(dog);
spot.name = 'Spot';
spot.say();             // => Spot says Woof!
```
The `say` method is overridden locally on the `fido` object, but it doesn't impact any other objects created from the prototype.

# What methods can you use to (a) check if a certain property is defined on the object itself and (b) return an array of an object's own property names. (as opposed to anywhere on the object's prototype chain)
---
`hasOwnProperty` and `Object.getOwnPropertyNames`
Example:
```
var foo = {
  a: 1,
};

var bar = Object.create(foo);
bar.a = 1;
bar.b = 2;
bar.hasOwnProperty('a');            // true
Object.getOwnPropertyNames(bar);    // ["a", "b"]

delete bar.a;
bar.hasOwnProperty('a');            // false
Object.getOwnPropertyNames(bar);    // ["b"]
foo.c = 3;
bar.hasOwnProperty('c');            // false
```

# What is the prototype pattern of object creation?
---
Defining shared behaviors on the constructor's `prototype` property.
Example:
```
var Dog = function() {};

Dog.prototype.say = function() {
  console.log(this.name + ' says Woof!');
}

Dog.prototype.run = function() {
  console.log(this.name + ' runs away.');
}

var fido = new Dog();
fido.name = 'Fido';
fido.say();             // => Fido says Woof!
fido.run();             // => Fido runs away.

var spot = new Dog();
spot.name = 'Spot';
spot.say();             // => Spot says Woof!
spot.run();             // => Spot runs away.
```

# Given the code below, what are two ways to have the Animal's prototype object come in between Dog.prototype and Object.prototype?
```
function Animal(type) {
  this.type = type;                // values for this can be land, air, or water
}

Animal.prototype.move = function() {
  console.log('Animal is moving.');
};

var Dog = function() {};

Dog.prototype.say = function() {
  console.log(this.name + ' says Woof!');
};

Dog.prototype.run = function() {
  console.log(this.name + ' runs away.');
};
```
---
1. Use the object returned by the Animal constructor (i.e., `Dog.prototype = new Animal('land');`
Drawback: This approach deviates from the idea that only behavior is shared through the prototype chain, not data.
2. Use the object created by `Object.create(Animal.prototype)` (i.e., `Dog.prototype = Object.create(Animal.prototype);`)
Benefit: No new properties can be found on the created object and only the behavior is shared.

Note: If you want the `Dog.prototype.constructor` to point to `Dog` instead of `Animal`, you must reset it manually: `Dog.prototype.constructor = Dog;`

# Given that you want this setup: `Dog.prototype --> Animal.prototype --> Object.prototype`, why would you NOT want to take the following approach?
```
function Animal(type) {
  this.type = type;                 // values for this can be land, air, or water
}

Animal.prototype.move = function() {
  console.log('Animal is moving.');
};

var Dog = function() {};
Dog.prototype = Animal.prototype;

Dog.prototype.say = function() {
  console.log(this.name + ' says Woof!');
};

Dog.prototype.run = function() {
  console.log(this.name + ' runs away.');
};
```
---
If we take this approach, additional behavior added to Dog.prototype also becomes available to objects created from the Animal constructor; which is often not what is expected and intended. This happens because Dog.prototype points to the exact same object that is assigned to Animal.prototype. As such, when you mutate Dog.prototype, the change is reflected in Animal.prototype.
Example (if you continue from above code):
```
var myNewAnimal = new Animal('air');
myNewAnimal.name = 'Foo';

myNewAnimal.say();  // => Foo says Woof!
myNewAnimal.move(); // => Animal is moving.
```

# Does `ninja` and `otherNinja` both have access to the `swung` and `swingSword` properties? 
```
var ninja;
function Ninja() {
  this.swung = true;
}

ninja = new Ninja();

Ninja.prototype = {
  swingSword: function() {
    return this.swung;
  },
};

otherNinja = new Ninja();
```
---
`ninja` has access to `swung` only.
`otherNinja` has access to `swung` and `swingSword`.
The `Ninja.prototype` object was reassigned to a new object with a `swingSword` method. `ninja` inherited from the original object, which does not have a `swingSword` property but does have access to `swung`. `otherNinja` was created after the modification, so it has access to both properties.

# What does the following code output? 
```
var shape = {
  getType: function() {
    return this.type; 
  },
}

function Triangle(a, b, c) {
  this.a = a;
  this.b = b;
  this.c = c;
  this.type = 'triangle';
}

Triangle.prototype = shape;
t = new Triangle(1, 2, 3);
console.log(t.constructor);
```
---
[Function: Object]
When we set the prototype of the `Triangle` function to `shape`, we lost the original `constructor` reference. If we want the constructor to return the Triangle function, we would have to manually set it as follows: `Triangle.prototype.constructor = Triangle`

# What is the value of `this` within a constructor function if the function is invoked with the `new` operator?
---
an instance of the object itself
Example (IMPORTANT!!! LOOK THIS OVER!!!)
The User function below first checks the value of `this` to see if it is an instance of the constructor function. If it isn't, that means it was invoked as a regular function, and it invokes itself with the `new` operator.
Constructor functions built this way are called "scope-safe constructors." Most of JavaScript's built-in constructors, such as `Object`, `Regex` and `Array`, are scope-safe.
```
function User(first, last){
  if (!(this instanceof User)) {
    return new User(first, last);
  }

  this.name = first + ' ' + last;
}

var name = 'Jane Doe';
var user = User('John', 'Doe');

console.log(name);        // => Jane Doe
console.log(user.name);   // => John Doe
```

# Create a function that can create an object with a given object as its prototype, without using Object.create.
---
```
function createObject(obj) {
  function F() {}
  F.prototype = obj;
  return new F();
}
```
We can create a temporary constructor function, set its prototype object to the argument, then create an object based on the constructor.

# What is the `prototype` property of a function used for?
---
It is assigned, by default, an object that instances of the constructor function can delegate to. This `prototype` property is only useful when we use the function as a constructor, in which case all objects that it constructs will have this object set as their prototype.

Every time we call a function as a constructor, JavaScript creates objects that are prototype linked to the object that is assigned to the prototype property.

# Create a function neww, so that it works like the new operator. You may use Object.create.
```
function neww(constructor, args) {
  // ..
}

function Person(firstName, lastName) {
  this.firstName = firstName;
  this.lastName = lastName;
}

Person.prototype.greeting = function() {
  console.log('Hello, ' + this.firstName + ' ' + this.lastName);
};

var john = neww(Person, ['John', 'Doe']);
john.greeting();          // => Hello, John Doe
john.constructor;         // Person(firstName, lastName) {...}
```
---
```
function neww(constructor, args) {
  var object = Object.create(constructor.prototype);
  var result = constructor.apply(object, args);

  return result === undefined ? object : result;
}
```

# What is the pseudo-classical pattern?
---
One of the two patterns that LS recommends for creating objects in JS. 
It involves (1) using a constructor to set object states and (2) defining shared methods on the constructor function's prototype.
```
var Point = function(x, y) {            // capitalized constructor name as a convention
  this.x = x || 0;                      // initialize states with arguments
  this.y = y || 0;                      // 0 as default value
};

Point.prototype.onXAxis = function() {  // shared behaviors added to constructor's prototype property
  return this.y === 0;
};

Point.prototype.onYAxis = function() {  // these methods are added one by one
  return this.x === 0;
};

Point.prototype.distanceToOrigin = function() {
  return Math.sqrt((this.x * this.x) + (this.y * this.y));
};

var pointA = new Point(30, 40);         // use new to create objects
var pointB = new Point(20);

pointA instanceof Point;                // use instanceof to check type
pointB instanceof Point;

pointA.distanceToOrigin();              // 50
pointB.onXAxis();                       // true
```

# What is the OLOO pattern?
---
One of the two patterns that LS recommends for creating objects in JS. 
It stands for "Object Linking to Other Objects" and was first popularized by Kyle Simpson.
It involves defining the shared behaviors on a prototype object, then using `Object.create()` to create objects that inherit directly from that object. 
```
var Point = {                       // capitalized name for the prototype as a convention
  x: 0,                             // default value defined on the prototype
  y: 0,

  onXAxis: function() {             // shared methods defined on the prototype
    return this.y === 0;
  },

  onYAxis: function() {
    return this.x === 0;
  },

  distanceToOrigin: function() {
    return Math.sqrt((this.x * this.x) + (this.y * this.y));
  },

  init: function(x, y) {            // optional init method to set states
    this.x = x;
    this.y = y;
    return this;
  },
};

var pointA = Object.create(Point).init(30, 40);
var pointB = Object.create(Point);

Point.isPrototypeOf(pointA);        // use isPrototypeOf to check type
Point.isPrototypeOf(pointB);

pointA.distanceToOrigin();          // 50
pointB.onXAxis();                   // true
```

# How can the `Object.defineProperties` method be used?
---
We can use it to define properties that are read-only.
Example
```
var myObject = {
  name: 'Obj',
};

Object.defineProperties(myObject, {
  age: {
    value: 30,
    writable: false,
  },
});

console.log(myObject.age); // => 30
myObject.age = 32;
console.log(myObject.age); // => 30
```

```
function newPerson(name) {
  // ...
}

var me = newPerson('Shane Riley');
me.log();     // => Shane Riley
me.log = function() { console.log('Amanda Rose'); };
me.log();     // => Shane Riley
```

# How can the `Object.freeze` method be used?
---
To freeze all non-object property values (prevent them from being changed or deleted). References to object values are frozen as well, but it's a "shallow freezing", not a "deep freezing". Once you freeze an object, it cannot be unfrozen.
```
var frozen = {
  integer: 4,
  string: 'String',
  array: [1, 2, 3],
  object: {
    foo: 'bar'
  },
  func: function() {
    console.log('I\'m frozen');
  },
};

Object.freeze(frozen);
frozen.integer = 8;
frozen.string = 'Number';
frozen.array.pop();
frozen.object.foo = 'baz';
frozen.func = function() {
  console.log('I\'m not really frozen');
};

console.log(frozen.integer);      // => 4
console.log(frozen.string);       // => String
console.log(frozen.array);        // => [1, 2]
console.log(frozen.object.foo);   // => baz
frozen.func();                    // => I'm frozen
```
